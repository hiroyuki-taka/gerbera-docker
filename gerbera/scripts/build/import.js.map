{"version":3,"sources":["webpack://gerbera-script/./src/common.ts","webpack://gerbera-script/./src/import.ts"],"names":["mimetype","regex","addVideo","obj","found","location","match","dir","rootPath","length","r","substring","lastIndexOf","charAt","split","name","p","getLastPath","replace","getRootPath","object_script_path","print","chain","video","title","objectType","OBJECT_TYPE_CONTAINER","upnpclass","UPNP_CLASS_CONTAINER","metaData","directories","season","parentItem","res","aux","refID","id","container","year","subtitle","airtime","is_cm","meta","M_DATE","JSON","stringify","titleItem","containerItem","yearItem","seasonItem","addCdsObject","addContainerTree","orig","mime","upnpClass","config","onlineservice","ONLINE_SERVICE_APPLE_TRAILERS","theora"],"mappings":"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","file":"import.js","sourcesContent":["export function getPlaylistType(mimetype: string) {\r\n    if (mimetype === 'audio/x-mpegurl') {\r\n        return 'm3u'\r\n    }\r\n    if (mimetype === 'audio/x-scpls') {\r\n        return 'pls'\r\n    }\r\n    if (mimetype == 'video/x-ms-asf' || mimetype === 'video/x-ms-asx') {\r\n        return 'asx';\r\n    }\r\n\r\n    return ''\r\n}\r\n\r\nexport function escapeSlash(name): string {\r\n    return name.replace(/\\\\/g, \"\\\\\\\\\").replace(/\\//g, \"\\\\/\")\r\n}\r\n\r\nexport function getLastPath(location: string) {\r\n    const p = location.split('/')\r\n    if (p.length > 1 && p[p.length - 2]) {\r\n        return p[p.length - 2]\r\n    } else {\r\n        return ''\r\n    }\r\n}\r\n\r\nexport function getRootPath(rootPath: string | null, location: string): string[] {\r\n    if (rootPath && rootPath.length > 0) {\r\n        const r = rootPath.substring(0, rootPath.lastIndexOf('/'))\r\n        const dir = location.substring(r.length, location.lastIndexOf('/'))\r\n        if (dir.charAt(0) === '/') {\r\n            return dir.substring(1).split('/')\r\n        } else {\r\n            return dir.split('/')\r\n        }\r\n    } else {\r\n        const dir = getLastPath(location)\r\n        if (dir !== '') {\r\n            return [escapeSlash(dir)]\r\n        }\r\n    }\r\n    return []\r\n}\r\n\r\nexport function createContainerChain(arr: string[]): string {\r\n    return '/' + (arr.map(s => escapeSlash(s)).join('/'))\r\n}\r\n","import {createContainerChain, getPlaylistType, getRootPath} from \"./common\";\r\n\r\ndeclare const config: any\r\n\r\ndeclare const object_script_path: string\r\n\r\ndeclare const ONLINE_SERVICE_APPLE_TRAILERS\r\ndeclare const ONLINE_SERVICE_NONE\r\n\r\ndeclare const OBJECT_TYPE_CONTAINER\r\ndeclare const OBJECT_TYPE_ITEM\r\ndeclare const OBJECT_TYPE_ITEM_EXTERNAL_URL\r\ndeclare const UPNP_CLASS_CONTAINER\r\n\r\ndeclare const M_TITLE\r\ndeclare const M_ARTIST\r\ndeclare const M_ALBUM\r\ndeclare const M_DATE\r\ndeclare const M_GENRE\r\ndeclare const M_DESCRIPTION\r\ndeclare const M_REGION\r\ndeclare const M_TRACKNUMBER\r\ndeclare const M_PARTNUMBER\r\ndeclare const M_AUTHOR\r\n\r\ndeclare function addCdsObject(obj: Orig, containerChain: string, lastContainerClass?: string)\r\ndeclare function addContainerTree(tree: any): string\r\ndeclare function copyObject<T>(originalObject: T): T\r\ndeclare function print(...values)\r\ndeclare function f2i(s: string): string\r\ndeclare function m2i(s: string): string\r\ndeclare function p2i(s: string): string\r\ndeclare function j2i(s: string): string\r\n\r\n\r\ninterface Orig {\r\n    readonly id: number\r\n    readonly parentID: number\r\n    objectType: any\r\n    mimetype: string\r\n    upnpclass: string\r\n    readonly location: string\r\n    title: string\r\n    readonly onlineservice: any\r\n    readonly theora: number\r\n    readonly res\r\n    readonly aux\r\n    playlistOrder: number\r\n    meta: any\r\n}\r\n\r\ndeclare const orig: Orig\r\n\r\nfunction addAudio(obj: Orig) {\r\n    const desc: string[] = []\r\n    let artist_full\r\n    let album_full\r\n\r\n    const title = obj.meta[M_TITLE] || obj.title\r\n\r\n    let artist = obj.meta[M_ARTIST]\r\n    if (artist) {\r\n        artist_full = artist\r\n        desc.push(artist)\r\n    } else {\r\n        artist = 'Unknown'\r\n        artist_full = null\r\n    }\r\n\r\n    let album = obj.meta[M_ALBUM]\r\n    if (album) {\r\n        album_full = album\r\n        desc.push(album)\r\n    } else {\r\n        album = 'Unknown'\r\n        album_full = null\r\n    }\r\n\r\n    desc.push(title)\r\n}\r\n\r\nconst regex = /.*\\/(.)\\/([0-9]{4})([0-4]Q) (.*)\\/(.*?)(-[0-9]+年[0-9]+月[0-9]+日[0-9]+時[0-9]+分)?(-cm)?\\.mp4$/\r\n\r\nfunction addVideo(obj: Orig) {\r\n\r\n    const found = obj.location.match(regex)\r\n\r\n    const dir = getRootPath(object_script_path, obj.location)\r\n    print('addVideo::Item', found, dir)\r\n\r\n    const chain = {\r\n        video: {title: 'Video', objectType: OBJECT_TYPE_CONTAINER, upnpclass: UPNP_CLASS_CONTAINER, metaData: []},\r\n        title: {title: 'Title', objectType: OBJECT_TYPE_CONTAINER, upnpclass: UPNP_CLASS_CONTAINER},\r\n        directories: {title: 'Directories', objectType: OBJECT_TYPE_CONTAINER, upnpclass: UPNP_CLASS_CONTAINER},\r\n        season: {title: 'Season', objectType: OBJECT_TYPE_CONTAINER, upnpclass: UPNP_CLASS_CONTAINER},\r\n        parentItem: {title: '...', objectType: OBJECT_TYPE_CONTAINER, upnpclass: UPNP_CLASS_CONTAINER, metaData: [], res: obj.res, aux: obj.aux, refID: obj.id},\r\n    }\r\n\r\n    if (found) {\r\n        const [full, container, year, season, title, subtitle, airtime, is_cm] = found\r\n\r\n        if (airtime) {\r\n            obj.meta[M_DATE] = airtime.replace(/-([0-9]+)年([0-9]+)月([0-9]+)日[0-9]+時[0-9]+分/, '$1-$2-$3')\r\n        } else {\r\n            switch (season) {\r\n                case '1Q':\r\n                    obj.meta[M_DATE] = `${year}-01-01`\r\n                    break\r\n                case '2Q':\r\n                    obj.meta[M_DATE] = `${year}-04-01`\r\n                    break\r\n                case '3Q':\r\n                    obj.meta[M_DATE] = `${year}-07-01`\r\n                    break\r\n                case '4Q':\r\n                    obj.meta[M_DATE] = `${year}-10-01`\r\n            }\r\n        }\r\n        print('addVideo::meta', JSON.stringify(obj.meta))\r\n\r\n        if (is_cm === '-cm') {\r\n            const titleItem = {title: title, objectType: OBJECT_TYPE_CONTAINER, upnpclass: UPNP_CLASS_CONTAINER}\r\n            const containerItem = {title: container, objectType: OBJECT_TYPE_CONTAINER, upnpclass: UPNP_CLASS_CONTAINER}\r\n            const yearItem = {title: year, objectType: OBJECT_TYPE_CONTAINER, upnpclass: UPNP_CLASS_CONTAINER}\r\n            const seasonItem = {title: season, objectType: OBJECT_TYPE_CONTAINER, upnpclass: UPNP_CLASS_CONTAINER}\r\n\r\n            addCdsObject({...obj}, addContainerTree([chain.video, chain.title, titleItem, {...chain.parentItem, title: 'CM'}]))\r\n            addCdsObject({...obj}, addContainerTree([chain.video, chain.directories, containerItem, titleItem, {...chain.parentItem, title: 'CM'}]))\r\n            addCdsObject({...obj}, addContainerTree([chain.video, chain.season, yearItem, seasonItem, titleItem, {...chain.parentItem, title: 'CM'}]))\r\n        } else {\r\n            obj = {...obj, title: subtitle}\r\n\r\n            const containerItem = {title: container, objectType: OBJECT_TYPE_CONTAINER, upnpclass: UPNP_CLASS_CONTAINER}\r\n            const yearItem = {title: year, objectType: OBJECT_TYPE_CONTAINER, upnpclass: UPNP_CLASS_CONTAINER}\r\n            const seasonItem = {title: season, objectType: OBJECT_TYPE_CONTAINER, upnpclass: UPNP_CLASS_CONTAINER}\r\n\r\n            addCdsObject({...obj}, addContainerTree([chain.video, chain.title, {...chain.parentItem, title: title}]))\r\n            addCdsObject({...obj}, addContainerTree([chain.video, chain.directories, containerItem, {...chain.parentItem, title: title}]))\r\n            addCdsObject({...obj}, addContainerTree([chain.video, chain.season, yearItem, seasonItem, {...chain.parentItem, title: title}]))\r\n        }\r\n    }\r\n}\r\n\r\nif (getPlaylistType(orig.mimetype) === '') {\r\n    const arr = orig.mimetype.split('/');\r\n    let mime = arr[0]\r\n\r\n    const obj = {...orig, refID: orig.id}\r\n\r\n    const upnpClass = orig.upnpclass\r\n    const audioLayout = config['/import/scripting/virtual-layout/attribute::audio-layout'] || 'Default'\r\n\r\n    switch (upnpClass) {\r\n        case 'object.item.videoItem':\r\n        case 'object.item.videoItem.movie':\r\n            addVideo(obj)\r\n            break\r\n        case 'object.item.audioItem':\r\n        case 'object.item.audioItem.multiTrack':\r\n        case 'object.item.audioItem.audioBook':\r\n        case 'object.item.audioItem.audioBroadcast':\r\n        default:\r\n            print(`Unable to handle upnp class: ${upnpClass} for ${obj.location}`)\r\n            if (mime === 'video' && obj.onlineservice === ONLINE_SERVICE_APPLE_TRAILERS) {\r\n                mime = 'trailer'\r\n            }\r\n            if (orig.mimetype === 'application/ogg') {\r\n                mime = (orig.theora === 1) ? 'video' : 'audio'\r\n            }\r\n            switch (mime) {\r\n                case 'video':\r\n                    addVideo(obj)\r\n                    break\r\n                default:\r\n                    print(`Unable to handle mime type: ${orig.mimetype} for ${obj.location}`)\r\n            }\r\n    }\r\n}"],"sourceRoot":""}