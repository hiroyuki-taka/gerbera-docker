{"version":3,"sources":["webpack://gerbera-script/./src/common.ts","webpack://gerbera-script/./src/import.ts"],"names":["createContainerChain","arr","map","s","replace","join","mimetype","regex","orig","mime","split","obj","refID","id","onlineservice","ONLINE_SERVICE_APPLE_TRAILERS","found","location","match","print","container","year","season","title","subtitle","airtime","is_cm","meta","M_DATE","JSON","stringify","addCdsObject","addVideo","theora"],"mappings":"yBA0CO,SAASA,EAAqBC,GACjC,MAAO,IAAOA,EAAIC,KAAI,SAAAC,GAAK,OAAYA,EA/B3BC,QAAQ,MAAO,QAAQA,QAAQ,MAAO,UA+BPC,KAAK,K,IA3CpBC,E,+MC4E1BC,EAAQ,6FA6Cd,GAAuC,KDxHlB,qBADWD,ECyHZE,KAAKF,UDvHV,MAEM,kBAAbA,EACO,MAEJ,ICkHgC,CACvC,IACMG,EADMD,KAAKF,SAASI,MAAM,KACf,GAEXC,EAAM,EAAH,KAAOH,MAAI,CAAEI,MAAOJ,KAAKK,KAMrB,UAATJ,IACIE,EAAIG,gBAAkBC,+BAtDlC,SAAkBJ,GAEd,IAAMK,EAAQL,EAAIM,SAASC,MAAMX,GAIjC,GAFAY,MAAM,WAAYH,GAEdA,EAAO,CACkEA,EAAK,GAAvE,IAAMI,EAA4DJ,EAAK,GAAtDK,EAAiDL,EAAK,GAAhDM,EAA2CN,EAAK,GAAxCO,EAAmCP,EAAK,GAAjCQ,EAA4BR,EAAK,GAAvBS,EAAkBT,EAAK,GAAdU,EAASV,EAAK,GAE9E,GAAIS,EACAd,EAAIgB,KAAKC,QAAUH,EAAQrB,QAAQ,6CAA8C,iBAEjF,OAAQkB,GACJ,IAAK,KACDX,EAAIgB,KAAKC,QAAaP,EAAI,SAC1B,MACJ,IAAK,KACDV,EAAIgB,KAAKC,QAAaP,EAAI,SAC1B,MACJ,IAAK,KACDV,EAAIgB,KAAKC,QAAaP,EAAI,SAC1B,MACJ,IAAK,KACDV,EAAIgB,KAAKC,QAAaP,EAAI,SAGtCF,MAAMU,KAAKC,UAAUnB,EAAIgB,OAIX,QAAVD,GACAK,aAAa,EAAD,GAAKpB,GAAMX,EAAqB,CAAC,QAAS,QAASuB,EAAO,QACtEQ,aAAa,EAAD,GAAKpB,GAAMX,EAAqB,CAAC,QAAS,cAAeoB,EAAWG,EAAO,QACvFQ,aAAa,EAAD,GAAKpB,GAAMX,EAAqB,CAAC,QAAS,SAAUqB,EAAMC,EAAQC,EAAO,UAErFZ,EAAM,EAAH,KAAOA,GAAG,CAAEY,MAAOC,IACtBO,aAAa,EAAD,GAAKpB,GAAMX,EAAqB,CAAC,QAAS,QAASuB,KAC/DQ,aAAa,EAAD,GAAKpB,GAAMX,EAAqB,CAAC,QAAS,cAAeoB,EAAWG,KAChFQ,aAAa,EAAD,GAAKpB,GAAMX,EAAqB,CAAC,QAAS,SAAUqB,EAAMC,EAAQC,OAmB9ES,CAASrB,IAQK,oBAAlBH,KAAKF,UACDE,KAAKyB,Q","file":"import.js","sourcesContent":["export function getPlaylistType(mimetype: string) {\r\n    if (mimetype === 'audio/x-mpegurl') {\r\n        return 'm3u'\r\n    }\r\n    if (mimetype === 'audio/x-scpls') {\r\n        return 'pls'\r\n    }\r\n    return ''\r\n\r\n}\r\n\r\nexport function escapeSlash(name): string {\r\n    return name.replace(/\\\\/g, \"\\\\\\\\\").replace(/\\//g, \"\\\\/\")\r\n}\r\n\r\nexport function getLastPath(location: string) {\r\n    const p = location.split('/')\r\n    if (p.length > 1 && p[p.length - 2]) {\r\n        return p[p.length - 2]\r\n    } else {\r\n        return ''\r\n    }\r\n}\r\n\r\nexport function getRootPath(rootPath: string | null, location: string): string[] {\r\n    if (rootPath && rootPath.length > 0) {\r\n        const r = rootPath.substring(0, rootPath.lastIndexOf('/'))\r\n        const dir = location.substring(r.length, location.lastIndexOf('/'))\r\n        if (dir.charAt(0) === '/') {\r\n            return dir.substring(1).split('/')\r\n        } else {\r\n            return dir.split('/')\r\n        }\r\n    } else {\r\n        const dir = getLastPath(location)\r\n        if (dir !== '') {\r\n            return [escapeSlash(dir)]\r\n        }\r\n    }\r\n    return []\r\n}\r\n\r\nexport function createContainerChain(arr: string[]): string {\r\n    return '/' + (arr.map(s => escapeSlash(s)).join('/'))\r\n}\r\n","import {createContainerChain, getPlaylistType, getRootPath} from \"./common\";\r\n\r\ndeclare const object_script_path: string\r\n\r\ndeclare const ONLINE_SERVICE_APPLE_TRAILERS\r\ndeclare const ONLINE_SERVICE_NONE\r\n\r\ndeclare const OBJECT_TYPE_CONTAINER\r\ndeclare const OBJECT_TYPE_ITEM\r\ndeclare const OBJECT_TYPE_ITEM_EXTERNAL_URL\r\n\r\ndeclare const M_TITLE\r\ndeclare const M_ARTIST\r\ndeclare const M_ALBUM\r\ndeclare const M_DATE\r\ndeclare const M_GENRE\r\ndeclare const M_DESCRIPTION\r\ndeclare const M_REGION\r\ndeclare const M_TRACKNUMBER\r\ndeclare const M_PARTNUMBER\r\ndeclare const M_AUTHOR\r\n\r\ndeclare function addCdsObject(obj: Orig, containerChain: string, lastContainerClass?: string)\r\ndeclare function copyObject<T>(originalObject: T): T\r\ndeclare function print(...values)\r\ndeclare function f2i(s: string): string\r\ndeclare function m2i(s: string): string\r\ndeclare function p2i(s: string): string\r\ndeclare function j2i(s: string): string\r\n\r\n\r\ninterface Orig {\r\n    readonly id: number\r\n    readonly parentID: number\r\n    objectType: any\r\n    mimetype: string\r\n    upnpclass: string\r\n    readonly location: string\r\n    title: string\r\n    readonly onlineservice: any\r\n    readonly theora: number\r\n    readonly aux\r\n    playlistOrder: number\r\n    meta: any\r\n}\r\n\r\ndeclare const orig: Orig\r\n\r\nfunction addAudio(obj: Orig) {\r\n    const desc: string[] = []\r\n    let artist_full\r\n    let album_full\r\n\r\n    const title = obj.meta[M_TITLE] || obj.title\r\n\r\n    let artist = obj.meta[M_ARTIST]\r\n    if (artist) {\r\n        artist_full = artist\r\n        desc.push(artist)\r\n    } else {\r\n        artist = 'Unknown'\r\n        artist_full = null\r\n    }\r\n\r\n    let album = obj.meta[M_ALBUM]\r\n    if (album) {\r\n        album_full = album\r\n        desc.push(album)\r\n    } else {\r\n        album = 'Unknown'\r\n        album_full = null\r\n    }\r\n\r\n    desc.push(title)\r\n}\r\n\r\nconst regex = /.*\\/(.)\\/([0-9]{4})([0-4]Q) (.*)\\/(.*?)(-[0-9]+年[0-9]+月[0-9]+日[0-9]+時[0-9]+分)?(-cm)?\\.mp4$/\r\n\r\nfunction addVideo(obj: Orig) {\r\n\r\n    const found = obj.location.match(regex)\r\n\r\n    print('addVideo', found)\r\n\r\n    if (found) {\r\n        const [full, container, year, season, title, subtitle, airtime, is_cm] = found\r\n\r\n        if (airtime) {\r\n            obj.meta[M_DATE] = airtime.replace(/-([0-9]+)年([0-9]+)月([0-9]+)日[0-9]+時[0-9]+分/, '$1-$2-$3')\r\n        } else {\r\n            switch (season) {\r\n                case '1Q':\r\n                    obj.meta[M_DATE] = `${year}-01-01`\r\n                    break\r\n                case '2Q':\r\n                    obj.meta[M_DATE] = `${year}-04-01`\r\n                    break\r\n                case '3Q':\r\n                    obj.meta[M_DATE] = `${year}-07-01`\r\n                    break\r\n                case '4Q':\r\n                    obj.meta[M_DATE] = `${year}-10-01`\r\n            }\r\n        }\r\n        print(JSON.stringify(obj.meta))\r\n\r\n        // addCdsObject({...obj}, createContainerChain(['Video', 'All Video', `${year}${season} ${title}`]))\r\n\r\n        if (is_cm === '-cm') {\r\n            addCdsObject({...obj}, createContainerChain(['Video', 'Title', title, 'CM']))\r\n            addCdsObject({...obj}, createContainerChain(['Video', 'Directories', container, title, 'CM']))\r\n            addCdsObject({...obj}, createContainerChain(['Video', 'Season', year, season, title, 'CM']))\r\n        } else {\r\n            obj = {...obj, title: subtitle}\r\n            addCdsObject({...obj}, createContainerChain(['Video', 'Title', title]))\r\n            addCdsObject({...obj}, createContainerChain(['Video', 'Directories', container, title]))\r\n            addCdsObject({...obj}, createContainerChain(['Video', 'Season', year, season, title]))\r\n        }\r\n    }\r\n}\r\n\r\nif (getPlaylistType(orig.mimetype) === '') {\r\n    const arr = orig.mimetype.split('/');\r\n    const mime = arr[0]\r\n\r\n    const obj = {...orig, refID: orig.id}\r\n\r\n    if (mime === 'audio') {\r\n\r\n    }\r\n\r\n    if (mime === 'video') {\r\n        if (obj.onlineservice === ONLINE_SERVICE_APPLE_TRAILERS) {\r\n\r\n        } else {\r\n            addVideo(obj)\r\n        }\r\n    }\r\n\r\n    if (mime === 'video') {\r\n\r\n    }\r\n\r\n    if (orig.mimetype === 'application/ogg') {\r\n        if (orig.theora === 1) {\r\n\r\n        } else {\r\n\r\n        }\r\n    }\r\n}"],"sourceRoot":""}